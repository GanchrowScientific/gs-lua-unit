/* Copyright Â© 2017 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const mkdirp = require("mkdirp");
const privateEventEmitter_1 = require("gs-utils/lib/privateEventEmitter");
const moduleWrapper_1 = require("./moduleWrapper");
var CONCAT_STYLE;
(function (CONCAT_STYLE) {
    CONCAT_STYLE[CONCAT_STYLE["deploy"] = 1] = "deploy";
    CONCAT_STYLE[CONCAT_STYLE["auxiliary"] = 2] = "auxiliary";
    CONCAT_STYLE[CONCAT_STYLE["entry"] = 3] = "entry";
    CONCAT_STYLE[CONCAT_STYLE["unit"] = 4] = "unit";
})(CONCAT_STYLE = exports.CONCAT_STYLE || (exports.CONCAT_STYLE = {}));
class LuaScriptConcat extends privateEventEmitter_1.PrivateEventEmitter {
    constructor(config, includedFiles = new Set()) {
        super();
        this.currentScript = [];
        this.finishedScript = '';
        this.inFile = config.inFile;
        this.inDir = path.dirname(this.inFile);
        this.moduleWrapper = config.moduleWrapper || new moduleWrapper_1.ModuleWrapper();
        this.originalScript = fs.readFileSync(this.inFile, 'utf8');
        this.outFile = config.outFile;
        this.concatStyle = config.concatStyle;
        this.includedFiles = includedFiles;
    }
    concat() {
        this.currentScript = [];
        if (this.concatStyle === CONCAT_STYLE.deploy || this.concatStyle === CONCAT_STYLE.unit) {
            this.currentScript.push(this.moduleWrapper.header(this.inDir));
        }
        let scriptByLines = this.originalScript.split('\n');
        this.includeRequiredFiles(scriptByLines.filter(this.isInclude).map(this.getIncluded));
        this.includeAuxillaryHeader();
        let ignoring = false;
        let inMainOnlySection = false;
        let inAuxiliaryOnlySection = false;
        scriptByLines.forEach(line => {
            if (this.isInclude(line)) {
                line = line.replace(/require\('(.*)'\)/, (a, b) => {
                    b = `${this.inDir}/${b}`;
                    return `require('${path.normalize(b)}')`;
                });
            }
            if (this.isIgnoreBegin(line)) {
                ignoring = true;
            }
            else if (this.isIgnoreEnd(line)) {
                ignoring = false;
            }
            else if (this.isMainBegin(line)) {
                inMainOnlySection = true;
            }
            else if (this.isMainEnd(line)) {
                inMainOnlySection = false;
            }
            else if (this.isAuxiliaryBegin(line)) {
                inAuxiliaryOnlySection = true;
            }
            else if (this.isAuxiliaryEnd(line)) {
                inAuxiliaryOnlySection = false;
            }
            else {
                // hides aux sections when in a main file and main sections when in an aux file
                let showSection = (!inAuxiliaryOnlySection && !inMainOnlySection) ||
                    (inAuxiliaryOnlySection && this.concatStyle !== CONCAT_STYLE.deploy) ||
                    (inMainOnlySection && this.concatStyle === CONCAT_STYLE.deploy);
                if (line && !this.isComment(line) && !ignoring && showSection) {
                    this.currentScript.push((this.concatStyle === CONCAT_STYLE.auxiliary ? '  ' : '') + line);
                }
            }
        });
        if (this.concatStyle === CONCAT_STYLE.auxiliary) {
            this.currentScript.push(this.moduleWrapper.close());
        }
        return (this.finishedScript = this.currentScript.join('\n'));
    }
    finish(entryScript = '') {
        this.writeDeployment(entryScript);
        this.writeUnit();
        this.reset();
    }
    get moduleName() {
        return path.normalize(this.inFile);
    }
    reset() { }
    includeAuxillaryHeader() {
        if (this.concatStyle === CONCAT_STYLE.auxiliary) {
            this.currentScript.push(`-- including file ${path.basename(this.inFile)}`);
            this.currentScript.push(this.moduleWrapper.wrapAuxillary(this.moduleName));
        }
        else {
            this.currentScript.push('-- Including target module');
        }
    }
    includeRequiredFiles(includes) {
        includes.map(include => path.normalize(`${this.inDir}/${include}`)).forEach(include => {
            if (!this.includedFiles.has(include)) {
                this.includedFiles.add(include);
                let luaScriptConcat = new LuaScriptConcat({
                    inFile: include,
                    concatStyle: CONCAT_STYLE.auxiliary,
                    moduleWrapper: this.moduleWrapper
                }, this.includedFiles);
                this.currentScript.push(luaScriptConcat.concat());
                luaScriptConcat.finish();
            }
        });
    }
    writeUnit() {
        if (this.concatStyle === CONCAT_STYLE.unit) {
            fs.writeFileSync(this.outFile, this.finishedScript);
        }
    }
    writeDeployment(entryScript) {
        if (this.concatStyle === CONCAT_STYLE.deploy) {
            fs.writeFileSync(this.outFile, [this.finishedScript, entryScript].join('\n'));
        }
    }
    getIncluded(line) {
        let included = /require\('(.*)'\)/.exec(line)[1];
        if (/\.lua$/.test(included)) {
            return included;
        }
        return `${included}.lua`;
    }
    isInclude(line) {
        return /require\('(.*)'\)/.test(line);
    }
    isComment(line) {
        return /^\-\-/.test(line);
    }
    isIgnoreBegin(line) {
        return /^\-\- BEGIN IGNORE/.test(line);
    }
    isIgnoreEnd(line) {
        return /^\-\- END IGNORE/.test(line);
    }
    isMainBegin(line) {
        return /^\-\- BEGIN MAIN/.test(line);
    }
    isMainEnd(line) {
        return /^\-\- END MAIN/.test(line);
    }
    isAuxiliaryBegin(line) {
        return /^\-\- BEGIN AUXILIARY/.test(line);
    }
    isAuxiliaryEnd(line) {
        return /^\-\- END AUXILIARY/.test(line);
    }
}
exports.LuaScriptConcat = LuaScriptConcat;
function concatDirectory(opts) {
    let { inDir, outDir, type, entryScript, moduleWrapper } = opts;
    let files = fs.readdirSync(inDir);
    mkdirp.sync(outDir);
    files.filter(f => /\.lua$/.test(f)).forEach(luaLib => {
        let testScript = new LuaScriptConcat({
            inFile: `${inDir}/${luaLib}`,
            outFile: `${outDir}/${luaLib}`,
            concatStyle: type || CONCAT_STYLE.unit,
            moduleWrapper
        });
        testScript.concat();
        testScript.finish(entryScript);
    });
}
exports.concatDirectory = concatDirectory;
function createEntryScript(opts) {
    let { entryTarget, moduleWrapper } = opts;
    entryTarget = entryTarget || 'main.lua';
    let luaScriptConcat = new LuaScriptConcat({
        inFile: entryTarget,
        concatStyle: CONCAT_STYLE.entry,
        moduleWrapper
    });
    let script = luaScriptConcat.concat();
    luaScriptConcat.finish();
    return script;
}
exports.createEntryScript = createEntryScript;
//# sourceMappingURL=luaCat.js.map