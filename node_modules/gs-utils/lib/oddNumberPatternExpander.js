/* Copyright Â© 2017 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const MAX_EVENTS = 500;
exports.numbersPattern = /([0-9]+)(\s*[.-]+\s*([0-9]+))?/g;
/**
 * Expands a string of odd numbers separated by periods or spaces
 * into a series of odd numbers. See the tests for examples.
 *
 * @param  {string}   numbersString the pattern of numbers to expand
 * @return {number[]}               the expanded set of numbers
 */
function expand(numbersString) {
    if (!numbersString) {
        return [];
    }
    exports.numbersPattern.lastIndex = 0;
    let matches = new Set();
    let lastMatch;
    do {
        lastMatch = matchIteration(numbersString);
        lastMatch.forEach(id => matches.add(id));
    } while (lastMatch.length);
    exports.numbersPattern.lastIndex = 0;
    return Array.from(matches).sort((x, y) => x - y).slice(0, MAX_EVENTS);
}
exports.expand = expand;
function matchIteration(numbersString) {
    let match = exports.numbersPattern.exec(numbersString);
    if (!match) {
        return [];
    }
    let firstNum = Number(match[1]);
    let secondNum = Number(match[3]) || firstNum;
    if (Number.isNaN(firstNum) || Number.isNaN(secondNum)) {
        return [];
    }
    if (firstNum > secondNum) {
        [secondNum, firstNum] = [firstNum, secondNum];
    }
    if (firstNum === 0) {
        firstNum = 1;
    }
    else if (isEven(firstNum)) {
        firstNum -= 1;
    }
    if (secondNum === 0) {
        secondNum = 1;
    }
    else if (isEven(secondNum)) {
        secondNum -= 1;
    }
    let matches = [];
    for (let i = firstNum; i <= secondNum; i += 2) {
        matches.push(i);
    }
    return matches;
}
function isEven(num) {
    return num % 2 === 0;
}
//# sourceMappingURL=oddNumberPatternExpander.js.map