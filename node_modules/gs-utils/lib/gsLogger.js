/* Copyright Â© 2016 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const nodemailer = require("nodemailer");
const SMTP_SERVER = 'smtp-relay.gmail.com';
exports.MSG_LEN_UNLIMITED = -1;
var Emphasis;
(function (Emphasis) {
    Emphasis[Emphasis["DEFAULT"] = 0] = "DEFAULT";
    Emphasis[Emphasis["NORMAL"] = 1] = "NORMAL";
    Emphasis[Emphasis["MEDIUM"] = 2] = "MEDIUM";
    Emphasis[Emphasis["STRONG"] = 3] = "STRONG";
    Emphasis[Emphasis["VERY_STRONG"] = 4] = "VERY_STRONG";
})(Emphasis = exports.Emphasis || (exports.Emphasis = {}));
var Level;
(function (Level) {
    Level[Level["DEBUG"] = 0] = "DEBUG";
    Level[Level["INFO"] = 1] = "INFO";
    Level[Level["WARN"] = 2] = "WARN";
    Level[Level["ERROR"] = 3] = "ERROR";
    Level[Level["FATAL"] = 4] = "FATAL";
    Level[Level["NONE"] = 5] = "NONE";
})(Level = exports.Level || (exports.Level = {}));
function levelString() {
    return Object.keys(Level).filter(level => Number.isNaN(Number.parseInt(level, 10))).join(', ');
}
const DEFAULT_LOG_LEVEL = Level.DEBUG;
const DEFAULT_MAX_DEBUG_MESSAGE_LENGTH = 64;
const transporter = nodemailer.createTransport({
    host: SMTP_SERVER,
    port: 465,
    secure: true,
    debug: true
});
let globalLogLevel = DEFAULT_LOG_LEVEL;
const MAILER_DEFAULTS = {
    to: 'Admin <admin@example.com>',
    from: 'System <system@example.com>',
    minLogLevel: Level.FATAL,
    subjectPrefix: 'Log notification'
};
class Logger {
    constructor(label, logLevel = Logger.defaultLogLevel, maxDebugMessageLength = DEFAULT_MAX_DEBUG_MESSAGE_LENGTH, mailer = {}) {
        this.label = label;
        this.logLevel = logLevel;
        this.maxDebugMessageLength = maxDebugMessageLength;
        this.mailer = mailer;
    }
    debug(message, options) {
        let emphasis = Emphasis.DEFAULT;
        let maxLength;
        let logPrefix;
        let suppressTag;
        let callback;
        if (options) {
            if (options.emphasis) {
                emphasis = options.emphasis;
            }
            maxLength = options.maxLength;
            logPrefix = options.logPrefix;
            suppressTag = options.suppressTag;
            callback = options.callback;
        }
        maxLength = typeof maxLength === 'number' ? maxLength : this.maxDebugMessageLength;
        this.logInternal(message, emphasis, Level.DEBUG, callback, maxLength, logPrefix, suppressTag);
    }
    info(message, callback) {
        this.logInternal(message, Emphasis.NORMAL, Level.INFO, callback);
    }
    warn(message, callback) {
        this.logInternal(message, Emphasis.MEDIUM, Level.WARN, callback);
    }
    error(message, callback) {
        this.logInternal(message, Emphasis.STRONG, Level.ERROR, callback);
    }
    fatal(message, callback) {
        this.logInternal(message, Emphasis.VERY_STRONG, Level.FATAL, callback);
    }
    installUncaughtExceptionLogger() {
        process.on('uncaughtException', (err) => {
            this.fatal(err.message);
            throw err;
        });
    }
    logInternal(message, emphasis, level, callback, maxLength = exports.MSG_LEN_UNLIMITED, logPrefix, suppressTag) {
        if (level >= this.getActualLogLevel()) {
            let stringMessage = this.stringify(message, maxLength);
            let fullMessage = this.generatePrefix(level, logPrefix, suppressTag) + stringMessage;
            let logMessage = this.colorMessage(fullMessage, emphasis);
            /* tslint:disable:no-console */
            console.log(logMessage);
            /* tslint:enable:no-console */
            if (this.shouldSendMail(level)) {
                this.sendEmailNotification(fullMessage, level, callback);
                return;
            }
        }
        if (callback) {
            process.nextTick(callback);
        }
    }
    stringify(message, maxLength) {
        let stringMessage;
        switch (typeof message) {
            case 'object':
                if (message instanceof Error) {
                    stringMessage = `${message.message}\n${message.stack}`;
                }
                else {
                    stringMessage = JSON.stringify(message);
                }
                break;
            case 'undefined':
                stringMessage = 'undefined';
                break;
            default:
                stringMessage = message.toString();
                break;
        }
        return maxLength === exports.MSG_LEN_UNLIMITED ? stringMessage : stringMessage.substr(0, maxLength);
    }
    colorMessage(fullMessage, emphasis) {
        switch (emphasis) {
            case Emphasis.DEFAULT:
                return fullMessage;
            case Emphasis.NORMAL:
                return chalk.stripColor(fullMessage);
            case Emphasis.MEDIUM:
                return chalk.cyan(fullMessage).toString();
            case Emphasis.STRONG:
                return chalk.red(fullMessage).toString();
            case Emphasis.VERY_STRONG:
                return chalk.bgRed.white(fullMessage).toString();
        }
    }
    generatePrefix(level, logPrefix = '', suppressTag = false) {
        logPrefix = logPrefix ? `${logPrefix} ` : '';
        let messageTag = suppressTag ? '' :
            `${Level[level]} [${new Date().toISOString()} #${process.pid}] ${this.label} --- `;
        return `${messageTag}${logPrefix}`;
    }
    getActualLogLevel() {
        return Math.max(globalLogLevel, this.logLevel);
    }
    sendEmailNotification(logMessage, level, callback) {
        let mailerOptions = this.mailer.mailerOptions || Logger.mailerOptions;
        (this.mailer.transporter || transporter).sendMail({
            from: mailerOptions.from,
            to: mailerOptions.to,
            subject: mailerOptions.subjectPrefix + ': ' + Level[level],
            text: logMessage
        }, function (error, info) {
            /* tslint:disable:no-console */
            if (error) {
                console.log(`Failed to send email notification with mailer options: ${JSON.stringify(mailerOptions)}`);
                console.log(error);
            }
            else {
                console.log(`Email notification sent to '${mailerOptions.to}': ${info.response}`);
            }
            /* tslint:disable:no-console */
            if (callback) {
                callback(error, error ? null : info);
            }
        });
    }
    shouldSendMail(level) {
        let defaultMailerOptions = Logger.mailerOptions;
        let mailerOptions = this.mailer.mailerOptions || defaultMailerOptions;
        return mailerOptions && level >= (Level[mailerOptions.minLogLevel] ?
            mailerOptions.minLogLevel :
            defaultMailerOptions && defaultMailerOptions.minLogLevel || globalLogLevel);
    }
}
Logger.defaultLogLevel = DEFAULT_LOG_LEVEL;
exports.Logger = Logger;
// To set up email, invoke the following method:
//
// setUpMailer({
//   to: 'Admin <admin@example.com>',
//   from: 'System <system@example.com>',
//   subjectPrefix: 'Log notification',
//   minLogLevel: Level.FATAL
// });
//
// Installs the email transport
function setUpMailer(mailerOptions = MAILER_DEFAULTS) {
    Logger.mailerOptions = Object.assign({}, MAILER_DEFAULTS, mailerOptions);
}
exports.setUpMailer = setUpMailer;
function setGlobalLogLevel(logLevel) {
    let logLevelEnum;
    if (Level.hasOwnProperty(logLevel.toString())) {
        logLevelEnum = Number.isNaN(Number.parseInt(logLevel, 10)) ? Level[logLevel] : logLevel;
    }
    else {
        throw new Error(`Invalid default log level ${logLevel}.\nValid levels are ${levelString()}.`);
    }
    globalLogLevel = logLevelEnum;
}
exports.setGlobalLogLevel = setGlobalLogLevel;
function getLogger(label, logLevel, maxDebugMessageLength) {
    return new Logger(label, logLevel, maxDebugMessageLength);
}
exports.getLogger = getLogger;
//# sourceMappingURL=gsLogger.js.map