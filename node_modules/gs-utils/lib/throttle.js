/* Copyright Â© 2015-2016 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
class GSThrottle {
    constructor(hardDelay, softDelay) {
        this.cycleEndTime = 0;
        this.hardDelay = Math.floor(hardDelay) || Infinity;
        this.softDelay = Math.min(Math.floor(softDelay) || this.hardDelay, this.hardDelay);
        if (this.softDelay <= 0 || !Number.isFinite(this.softDelay)) {
            throw new RangeError('throttle: invalid delay time');
        }
    }
    callback(cb) {
        this.wrap(cb);
    }
    more(...args) {
        this.registeredCallback(...args);
    }
    wrap(cb) {
        this.registeredCallback = (...args) => {
            let fn = () => {
                this.cycleEndTime = 0;
                cb(...args);
            };
            let delay;
            clearTimeout(this.timeoutId);
            if (this.cycleEndTime) {
                delay = Math.min(this.softDelay, this.cycleEndTime - Date.now());
            }
            else {
                this.cycleEndTime = Date.now() + this.hardDelay;
                delay = this.softDelay;
            }
            if (delay > 0) {
                this.timeoutId = setTimeout(fn, delay);
            }
            else {
                fn();
            }
        };
    }
}
exports.GSThrottle = GSThrottle;
//# sourceMappingURL=throttle.js.map