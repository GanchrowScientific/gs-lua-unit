/* Copyright Â© 2017-2019 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const js_yaml_1 = require("js-yaml");
const range_1 = require("./range");
const utilities_1 = require("./utilities");
class RandomElement extends js_yaml_1.Type {
    constructor() {
        super('!randomElement', {
            kind: 'sequence',
            construct(array) {
                return utilities_1.shuffleArray(array)[0];
            },
            resolve(array) {
                return Array.isArray(array);
            }
        });
    }
}
/**
 * A custom yaml type that populates yaml field with items from relative file
 * @type {FromFile}
 */
class FromFile extends js_yaml_1.Type {
    constructor(basePath) {
        super('!fromFile', {
            kind: 'sequence',
            construct(fileAndDefault) {
                let file = fileAndDefault[0];
                try {
                    return fs.readFileSync(/^\//.test(file) ? file : basePath + path.sep + file).toString('utf8').trim().split('\n');
                }
                catch (e) {
                    return fileAndDefault[1];
                }
            },
            resolve(fileAndDefault) {
                return fileAndDefault.length === 2;
            }
        });
    }
}
/**
 * A custom yaml type that converts a range into an array
 * @type {Range}
 */
class Range extends js_yaml_1.Type {
    constructor() {
        super('!range', {
            kind: 'sequence',
            construct: (data) => {
                return Array.isArray(data) && data.length === 1 ? this.transform(data[0]) : [];
            }
        });
    }
    transform(v) {
        v = String(v);
        if (/^-*[0-9.]+\.\.\.-*[0-9.]+/.test(v)) {
            return new range_1.RangeExclusive(v);
        }
        if (/^-*[.0-9]+\.\.-*[0-9.]+/.test(v)) {
            return new range_1.RangeInclusive(v);
        }
        return [];
    }
}
/**
 * A custom yaml type that describes a path relative to the file being loaded
 * @type {Path}
 */
class Path extends js_yaml_1.Type {
    constructor(basePath) {
        super('!path', {
            kind: 'scalar',
            construct(data) {
                return basePath + path.sep + data;
            },
            resolve(data) {
                return typeof data === 'string';
            }
        });
    }
}
/**
 * A custom yaml type that flattens yaml arrays, useful for merging in array configurations
 * @type {Flatten}
 */
class Flatten extends js_yaml_1.Type {
    constructor() {
        super('!flatten', {
            kind: 'sequence',
            construct(data) {
                return utilities_1.flattenArray(data);
            },
            resolve(data) {
                return Array.isArray(data);
            }
        });
    }
}
class Ymd extends js_yaml_1.Type {
    constructor() {
        super('!ymd', {
            kind: 'scalar',
            construct(data) {
                let day = Number((data.match(Ymd.PATTERN) || [])[1]) || 0;
                let newDate = new Date(Date.now() - Ymd.ONE_DAY * day);
                return `${newDate.toISOString().split('T')[0].replace(/\-/g, '')}`;
            }
        });
    }
}
Ymd.PATTERN = /last ([0-9]+) day[s]?$/i;
Ymd.ONE_DAY = 1000 * 60 * 60 * 24;
function schemaFactory(basePath) {
    // See https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18978
    return js_yaml_1.Schema.create(js_yaml_1.DEFAULT_SAFE_SCHEMA, [
        new Range(), new Path(basePath), new Flatten(), new Ymd(), new FromFile(basePath),
        new RandomElement()
    ]);
}
exports.schemaFactory = schemaFactory;
//# sourceMappingURL=yamlExtensions.js.map