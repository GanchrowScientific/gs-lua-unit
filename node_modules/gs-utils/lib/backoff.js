/* Copyright Â© 2016 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_RETRIES = 10;
const DEFAULT_INTERVAL = 100;
const DEFAULT_TRUNCATE = Infinity;
var BackoffState;
(function (BackoffState) {
    BackoffState[BackoffState["STOPPED"] = 0] = "STOPPED";
    BackoffState[BackoffState["FIRING"] = 1] = "FIRING";
})(BackoffState || (BackoffState = {}));
class Backoff {
    constructor(backoffOpts = {}) {
        this.registeredCBs = [];
        this.registeredEnds = [];
        this.retryCount = 0;
        this.state = BackoffState.STOPPED;
        this.retries = backoffOpts.retries || DEFAULT_RETRIES;
        this.baseInterval = backoffOpts.baseInterval || DEFAULT_INTERVAL;
        this.truncate = backoffOpts.truncate || DEFAULT_TRUNCATE;
    }
    register(cb) {
        this.registeredCBs.push(cb);
    }
    onEnd(cb) {
        this.registeredEnds.push(cb);
    }
    fire(...args) {
        if (this.retryCount >= this.retries) {
            this.reset();
            process.nextTick(() => {
                this.registeredEnds.forEach(cb => cb());
            });
        }
        else if (this.state === BackoffState.STOPPED) {
            this.state = BackoffState.FIRING;
            this.timeout = setTimeout(() => {
                this.state = BackoffState.STOPPED;
                this.registeredCBs.forEach(cb => cb(...args));
            }, this.calculateTime());
            this.retryCount++;
        }
    }
    reset() {
        this.retryCount = 0;
        this.state = BackoffState.STOPPED;
        clearTimeout(this.timeout);
    }
    calculateTime() {
        return Math.min(this.truncate, this.baseInterval * Math.exp(this.retryCount * this.baseInterval / 1000));
    }
}
exports.Backoff = Backoff;
//# sourceMappingURL=backoff.js.map