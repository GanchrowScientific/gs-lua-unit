/* Copyright Â© 2017 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const utilities_1 = require("./utilities");
const INHERITS = 'inherits';
function inheritProperty(to, from, inherit) {
    if (Array.isArray(from[inherit])) {
        to[inherit] = to[inherit] || utilities_1.dup(from[inherit]);
    }
    else if (utilities_1.isObject(from[inherit])) {
        to[inherit] = Object.assign({}, utilities_1.dup(from[inherit]), to[inherit]);
    }
    else if (!(inherit in to)) {
        to[inherit] = from[inherit];
    }
}
function selfExtender(config, noInheritKeys, innerProperty = null) {
    noInheritKeys = (noInheritKeys || []).concat(INHERITS);
    sortFromRoot(config).forEach(to => {
        if (config[to][INHERITS]) {
            utilities_1.toArray(config[to][INHERITS]).forEach(from => {
                let toInnerConfig = config[to];
                let fromInnerConfig = config[from] || {};
                if (innerProperty) {
                    fromInnerConfig = fromInnerConfig[innerProperty] || {};
                    toInnerConfig = toInnerConfig[innerProperty] || (toInnerConfig[innerProperty] = {});
                }
                Object.keys(fromInnerConfig).filter(f => !noInheritKeys.includes(f)).forEach(inherit => {
                    inheritProperty(toInnerConfig, fromInnerConfig, inherit);
                });
            });
        }
    });
    return config;
}
exports.selfExtender = selfExtender;
function sortFromRoot(config) {
    let sorted = [];
    let seen = new Set();
    Object.keys(config || {}).forEach(walkToRoot);
    function walkToRoot(key) {
        if (seen.has(key) || !(key in config)) {
            return;
        }
        seen.add(key);
        if ((INHERITS in config[key])) {
            utilities_1.toArray(config[key][INHERITS]).forEach(walkToRoot);
        }
        sorted.push(key);
    }
    return sorted;
}
//# sourceMappingURL=selfExtender.js.map