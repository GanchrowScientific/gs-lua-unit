/* Copyright Â© 2016 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const yaml = require("js-yaml");
const path = require("path");
const fs = require("fs");
const gsLogger_1 = require("./gsLogger");
const yamlExtensions_1 = require("./yamlExtensions");
const EXECUTION_ENVIRONMENT = 'EXECUTION_ENVIRONMENT';
const ENVIRONMENTS = 'ENVIRONMENTS';
const DEFAULT_EXECUTION_ENVIRONMENT = 'DEVELOPMENT';
let logger = gsLogger_1.getLogger('config-loader');
class ConfigLoader {
    constructor(executionEnvironment, basePath = '') {
        this.executionEnvironment = executionEnvironment;
        this.basePath = basePath;
        this.executionEnvironment = this.getExecutionEnvironmentFromEnv(executionEnvironment);
        if (basePath && !basePath.endsWith(path.sep)) {
            basePath += path.sep;
        }
        else {
            basePath = '';
        }
        logger.debug(`ConfigLoader EXECUTION_ENVIRONMENT: ${this.executionEnvironment} basePath ${this.basePath}`);
    }
    static viewEnvironments(fileName) {
        return Object.keys(ConfigLoader.loadConfig(fileName)[ENVIRONMENTS] || {});
    }
    static viewEnvironmentsRaw(rawYaml) {
        return Object.keys(ConfigLoader.loadConfigRaw(rawYaml)[ENVIRONMENTS] || {});
    }
    static loadConfig(fileName, baseName = '') {
        return ConfigLoader.loadConfigRaw(fs.readFileSync(fileName, 'utf-8'), baseName);
    }
    static loadConfigRaw(yamlString, baseName = '') {
        return yaml.safeLoad(yamlString, { schema: yamlExtensions_1.schemaFactory(baseName) });
    }
    loadConfig(fileName) {
        let parsedYaml = ConfigLoader.loadConfig(`${this.basePath}${fileName}`, path.dirname(`${this.basePath}${fileName}`));
        return this.applyEnvironment(parsedYaml);
    }
    loadConfigRaw(yamlString, baseName = '') {
        let parsedYaml = ConfigLoader.loadConfigRaw(yamlString, baseName);
        return this.applyEnvironment(parsedYaml);
    }
    applyEnvironment(config = {}) {
        let allEnvironments = config[ENVIRONMENTS] || {};
        let thisEnvironment = this.matchEnvironments(allEnvironments);
        delete config[ENVIRONMENTS];
        Object.assign(config, thisEnvironment);
        return config;
    }
    getExecutionEnvironmentFromEnv(initialExecutionEnvironment) {
        let executionEnvironment;
        let envString;
        if (initialExecutionEnvironment) {
            executionEnvironment = initialExecutionEnvironment;
            envString = String(executionEnvironment);
        }
        else {
            envString = process.env[EXECUTION_ENVIRONMENT];
            envString = envString ? envString.toUpperCase() : DEFAULT_EXECUTION_ENVIRONMENT;
        }
        return envString;
    }
    matchEnvironments(allEnvironments) {
        if (allEnvironments[this.executionEnvironment]) {
            return allEnvironments[this.executionEnvironment];
        }
        let possibleEnvironmentKeys = Object.keys(allEnvironments).filter(e => /\*$/.test(e));
        let curEnv = possibleEnvironmentKeys.find(env => this.generateEnvironmentExpression(env).test(this.executionEnvironment));
        return allEnvironments[curEnv] || {};
    }
    generateEnvironmentExpression(env) {
        return new RegExp(env.replace(/[.]?\*$/, '.*'));
    }
}
exports.ConfigLoader = ConfigLoader;
let defaultConfigLoader = new ConfigLoader();
function loadConfig(fileName) {
    return defaultConfigLoader.loadConfig(fileName);
}
exports.loadConfig = loadConfig;
function loadConfigRaw(yamlString, baseName = '') {
    return defaultConfigLoader.loadConfigRaw(yamlString, baseName);
}
exports.loadConfigRaw = loadConfigRaw;
//# sourceMappingURL=configLoader.js.map