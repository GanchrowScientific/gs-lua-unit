/* Copyright Â© 2018 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
function getRangeArguments(items, splitter = '..') {
    let [rawRange, step] = items;
    return [...rawRange.split(splitter).map(Number), Number(step)];
}
class Range extends Array {
    constructor(rawRange, splitter = '..') {
        super();
        this.splitter = splitter;
        let [start, end, step] = getRangeArguments(rawRange.split(','), this.splitter);
        this.generateRange(start, end, step);
    }
}
exports.Range = Range;
class RangeExclusive extends Range {
    constructor(rawRange) {
        super(rawRange, '...');
    }
    generateRange(start, end, step) {
        step = Number(step);
        if (start < end && Math.abs(step || 1) > 0) {
            step = Math.abs(step || 1);
            for (let i = start + step; i < end; i = i + step) {
                this.push(i);
            }
            return;
        }
        if (start > end && Math.abs(step || 1) > 0) {
            step = Math.abs(step || 1);
            for (let i = start - step; i > end; i = i - step) {
                this.push(i);
            }
            return;
        }
        this.push(start);
    }
}
exports.RangeExclusive = RangeExclusive;
class RangeInclusive extends Range {
    generateRange(start, end, step) {
        step = Number(step);
        if (start < end && Math.abs(step || 1) > 0) {
            step = Math.abs(step || 1);
            for (let i = start; i <= end; i = i + step) {
                this.push(i);
            }
            return;
        }
        if (start > end && Math.abs(step || 1) > 0) {
            step = Math.abs(step || 1);
            for (let i = start; i >= end; i = i - step) {
                this.push(i);
            }
            return;
        }
        this.push(start);
    }
}
exports.RangeInclusive = RangeInclusive;
//# sourceMappingURL=range.js.map