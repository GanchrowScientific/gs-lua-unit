import * as nodemailer from 'nodemailer';
import { NoArgVoidFunc } from './utilities';
export declare const MSG_LEN_UNLIMITED = -1;
export declare enum Emphasis {
    DEFAULT = 0,
    NORMAL = 1,
    MEDIUM = 2,
    STRONG = 3,
    VERY_STRONG = 4
}
export declare enum Level {
    DEBUG = 0,
    INFO = 1,
    WARN = 2,
    ERROR = 3,
    FATAL = 4,
    NONE = 5
}
export interface LoggerOptions {
    maxLength?: number;
    logPrefix?: string;
    emphasis?: Emphasis;
    suppressTag?: boolean;
    callback?: NoArgVoidFunc;
}
export interface MailerOptions {
    to: string;
    from: string;
    subjectPrefix: string;
    minLogLevel?: Level;
}
export declare class Logger {
    private label;
    private logLevel;
    maxDebugMessageLength: number;
    private mailer;
    static defaultLogLevel: Level;
    static mailerOptions: MailerOptions;
    constructor(label: string, logLevel?: Level, maxDebugMessageLength?: number, mailer?: {
        transporter?: nodemailer.Transporter;
        mailerOptions?: MailerOptions;
    });
    debug(message: any, options?: LoggerOptions): void;
    info(message: any, callback?: NoArgVoidFunc): void;
    warn(message: any, callback?: NoArgVoidFunc): void;
    error(message: any, callback?: NoArgVoidFunc): void;
    fatal(message: any, callback?: NoArgVoidFunc): void;
    installUncaughtExceptionLogger(): void;
    private logInternal;
    private stringify;
    private colorMessage;
    private generatePrefix;
    private getActualLogLevel;
    private sendEmailNotification;
    private shouldSendMail;
}
export declare function setUpMailer(mailerOptions?: MailerOptions): void;
export declare function setGlobalLogLevel(logLevel: Level | string): void;
export declare function getLogger(label: string, logLevel?: Level, maxDebugMessageLength?: number): Logger;
