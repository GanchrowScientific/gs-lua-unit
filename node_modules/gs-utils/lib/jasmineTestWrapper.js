/* Copyright Â© 2018 Ganchrow Scientific, SA all rights reserved */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
class JasmineExpectation {
    constructor(expect, jasmineDone) {
        this.expect = expect;
        this.jasmineDone = jasmineDone;
        this.expectedTestCalls = 0;
    }
    ok(val, ...args) {
        this.expect(val).toBeTruthy();
    }
    expectCount(num) {
        this.strictEqual(num, this.expectedTestCalls);
    }
    deepEqual(a, b, ...args) {
        this.expectedTestCalls++;
        this.expect(a).toEqual(b);
    }
    notDeepEqual(a, b, ...args) {
        this.expectedTestCalls++;
        this.expect(a).not.toEqual(b);
    }
    strictEqual(a, b, ...args) {
        this.expectedTestCalls++;
        this.expect(a).toBe(b);
    }
    notStrictEqual(a, b, ...args) {
        this.expectedTestCalls++;
        this.expect(a).not.toBe(b);
    }
    throws(a, b, ...args) {
        this.expectedTestCalls++;
        if (b) {
            this.expect(a).toThrow(b);
        }
        else {
            this.expect(a).toThrow();
        }
    }
    doesNotThrow(a, b, ...args) {
        this.expectedTestCalls++;
        if (b) {
            this.expect(a).not.toThrow(b);
        }
        else {
            this.expect(a).not.toThrow();
        }
    }
    done(e) {
        if (this.jasmineDone) {
            this.jasmineDone(e);
        }
        this.expectedTestCalls = 0;
    }
}
exports.JasmineExpectation = JasmineExpectation;
exports.testWrapper = {
    init(expect) {
        return new JasmineExpectation(expect);
    },
    run(module, expect, desc = 'Test') {
        describe(desc, () => {
            let ctx = {};
            if (module.setUp) {
                beforeEach(done => {
                    module.setUp.call(ctx, done);
                });
            }
            let testCb = prop => {
                let func = module[prop];
                it(`should ${prop}`, done => {
                    let test = new JasmineExpectation(expect, done);
                    func.call(ctx, test);
                });
            };
            let onlyTests = Object.keys(module).filter(prop => prop.startsWith('ftest'));
            if (onlyTests.length) {
                onlyTests.forEach(testCb);
            }
            else {
                Object.keys(module).filter(prop => prop.startsWith('test')).forEach(testCb);
            }
            if (module.tearDown) {
                afterEach(done => {
                    module.tearDown.call(ctx, done);
                });
            }
        });
    }
};
//# sourceMappingURL=jasmineTestWrapper.js.map